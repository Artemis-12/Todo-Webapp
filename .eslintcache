[{"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/index.js":"1","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/pages/Home.js":"2","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/NavbarElements.js":"3","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/index.js":"4","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/SidebarElements.js":"5","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/SignModal.js":"6","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/index.js":"7","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/NavigationItem.js":"8","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/ConfigureStore.js":"9","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/projects/projectsSlice.js":"10","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/RClickProject.js":"11","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/sessions/sessionSlice.js":"12","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/AddProjectModal.js":"13","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/App.js":"14","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/todos/todoSlice.js":"15","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/index.js":"16","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/StatsBar.js":"17","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/MainElements.js":"18","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/InputComponent.js":"19","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/TodosComponent.js":"20","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/TimerComponent.js":"21","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/TimerElements.js":"22","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/RadialSeparators.js":"23"},{"size":3739,"mtime":1611591364602,"results":"24","hashOfConfig":"25"},{"size":4353,"mtime":1613172549007,"results":"26","hashOfConfig":"25"},{"size":1556,"mtime":1612722271578,"results":"27","hashOfConfig":"25"},{"size":2791,"mtime":1612984603443,"results":"28","hashOfConfig":"25"},{"size":1752,"mtime":1612554673768,"results":"29","hashOfConfig":"25"},{"size":5952,"mtime":1612990218084,"results":"30","hashOfConfig":"25"},{"size":1243,"mtime":1612992589088,"results":"31","hashOfConfig":"25"},{"size":1780,"mtime":1612985957303,"results":"32","hashOfConfig":"25"},{"size":413,"mtime":1611353899810,"results":"33","hashOfConfig":"25"},{"size":2969,"mtime":1611836812701,"results":"34","hashOfConfig":"25"},{"size":2013,"mtime":1611836722114,"results":"35","hashOfConfig":"25"},{"size":821,"mtime":1611431852953,"results":"36","hashOfConfig":"25"},{"size":5753,"mtime":1612720793053,"results":"37","hashOfConfig":"25"},{"size":1144,"mtime":1613047848230,"results":"38","hashOfConfig":"25"},{"size":3610,"mtime":1613059091993,"results":"39","hashOfConfig":"25"},{"size":1265,"mtime":1613169252934,"results":"40","hashOfConfig":"25"},{"size":2062,"mtime":1613067499635,"results":"41","hashOfConfig":"25"},{"size":319,"mtime":1612993568632,"results":"42","hashOfConfig":"25"},{"size":10383,"mtime":1613170892934,"results":"43","hashOfConfig":"25"},{"size":5032,"mtime":1613172461729,"results":"44","hashOfConfig":"25"},{"size":6744,"mtime":1613172530545,"results":"45","hashOfConfig":"25"},{"size":2493,"mtime":1613172688943,"results":"46","hashOfConfig":"25"},{"size":499,"mtime":1613148792837,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1o856sf",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/index.js",[],["105","106"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/pages/Home.js",["107"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/NavbarElements.js",[],["108","109"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/index.js",["110"],"import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport { BiSun } from 'react-icons/bi';\nimport { WiSunset } from 'react-icons/wi';\nimport { RiCalendarCheckLine } from 'react-icons/ri';\nimport { AiOutlinePlus } from 'react-icons/ai';\nimport { SidebarContainer, ChronoNav, ItemIcon, ProjectsNav, Circle,\nProjectButton, ButtonDesc} from './SidebarElements';\nimport NavigationItem from './NavigationItem';\nimport { useSelector } from 'react-redux';\nimport { selectProjects } from '../../features/projects/projectsSlice.js';\n\nconst Projects = ({projects, togglePopup, toggleProjectModal}) => {\n\n            return(projects.length !== 0 ?<ProjectsNav>\n                {\n                    projects.map(project => \n                        !project.isCompleted ? <NavigationItem \n                            togglePopup={togglePopup}\n                            icon={\n                            <Circle color={project.color} />\n                           }      \n                            key={project.id} \n                            id={project.id}\n                            itemName={project.text}    \n                            hours={0}\n                            noItems={0}\n                        /> : null\n                    )\n                }\n                <ProjectButton onClick={toggleProjectModal}>\n                    <AiOutlinePlus />\n                    <ButtonDesc>\n                        Add Project\n                    </ButtonDesc>\n                </ProjectButton>\n\n            </ProjectsNav> : null)\n}\n\nexport const Sidebar = ({togglePopup, toggleProjectModal}) => {\n    const projects = useSelector(selectProjects);\n    // Hours and number of todos have to be calculated dynamically\n    // Add it later after making sure everything is in place\n    return (\n        <SidebarContainer>\n            <ChronoNav>\n                <NavigationItem icon={\n                    <ItemIcon color=\"#44a336\">\n                        {<BiSun />}\n                    </ItemIcon>\n                } itemName=\"Today\" hours={2} noItems={1}/>\n                 <NavigationItem icon={\n                    <ItemIcon color=\"#e0881b\">\n                        {<WiSunset />}\n                    </ItemIcon>\n                } itemName=\"Tomorrow\" hours={0} noItems={0}/>\n                 <NavigationItem icon={\n                    <ItemIcon color={Colors.themeBlue}>\n                        {<RiCalendarCheckLine />}\n                    </ItemIcon>\n                } itemName=\"Upcoming\" hours={0} noItems={0}/>\n            </ChronoNav>\n            <Projects projects={projects} togglePopup={togglePopup} \n            toggleProjectModal={toggleProjectModal}/>\n        </SidebarContainer>\n    )\n}\n\nexport default Sidebar;\n",["111","112"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/SidebarElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/SignModal.js",["113"],"import React, { useRef} from 'react';\nimport { useSpring, animated} from 'react-spring';\nimport styled from 'styled-components';\nimport { GiClockwork } from 'react-icons/gi';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport { Link, Switch, Route, Redirect} from 'react-router-dom';\nimport { MdClose} from 'react-icons/md';\nimport { useRouteMatch } from 'react-router-dom';\n\nexport const Background = styled.div`\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.8);\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 5;\n`\n\nconst ModalWrapper = styled.div`\n    width: 400px;\n    height: 500px;\n    box-shadow: 0px 5px 16px rgba(0,0,0,0.2);\n    background: #fff;\n    color: #000;\n    display: grid;\n    grid-template-rows: 2fr 3fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n    padding: 10px 10px 0 10px;\n    margin-top: -100px;\n`\n\nconst LogoDiv = styled.div`\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n` \n\nconst ClockLogo = styled(GiClockwork)`\n    color: ${Colors.themeBlue};\n    font-size: 5rem;\n    margin-top: 10px;\n`\n\nexport const FormDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n` \n\nexport const Form = styled.form`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding: 0;\n    width: 100%;\n`\n\nconst Input = styled.input`\n    padding: 5px 10px;\n    border: 1px solid ${Colors.lightGray};\n    font-size: 1.1rem;\n    color: #3b3a39;\n    width: 90%;\n    margin-top: 15px;\n    border-radius: 5px;\n    height: 40px;\n    &:focus{\n        outline-color: ${Colors.themeBlue};\n    }\n` \nconst WarningSign = styled.span`\n    display: block;\n    color: #ff3853;\n    width: 90%;\n    text-align: left;\n    height: 30px;\n    padding: 10px 4px;\n` \n\nconst SignBtn = styled.button`\n    width: 90%;\n    border-radius: 5px;\n    border: none;\n    background-color: ${Colors.themeBlue};\n    outline: none;\n    color: #fff;\n    padding: 10px 64px;\n    text-align: center;\n    font-size: 1.2rem;\n` \n\nconst ForgetSpan = styled(Link)`\n    width: 90%;\n    font-size: 0.9rem;\n    color: #000;\n    text-align: center;\n    padding: 5px 0;\n    textt-decoration: none;\n`\n\nconst ModalNavigator = styled(Link)`\n    border-top: 1px solid ${Colors.lighterGray};\n    text-align: center;\n    padding: 10px 64px;\n    align-self: flex-end;\n    font-size: 1.2rem;\n    text-decoration: none;\n`\n\nconst CloseModalButton = styled(Link)`\n    width: 20px;\n    height: 20px;\n    color: ${Colors.darkGray};\n    position: absolute;\n    top: 10px;\n    right: 15px;\n    text-decoration: none;\n    cursor: pointer;\n`\n\nconst RecoverMessage = styled.span`\n    font-size: 1.3rem;\n    color: ${Colors.darkGray};\n    width: 90%;\n`\n\nconst SignModal = ({toggleModal, forget, btnText, navigatorText, change,url}) => {\n\n    return(\n        <ModalWrapper >\n            <CloseModalButton to={`${url}`} onClick={toggleModal}>\n                <MdClose />\n            </CloseModalButton>\n            <LogoDiv>\n                <ClockLogo />\n            </LogoDiv>\n            <FormDiv>\n                <Form>\n                    <Input type=\"email\" placeholder=\"Email Address\" \n                    maxLength=\"30\" name=\"email\" id=\"email\" />\n                    <Input type=\"password\" placeholder=\"Password\"\n                    maxLength=\"20\" name=\"password\" id=\"password\" />\n                </Form>\n                <WarningSign></WarningSign>\n                <SignBtn type=\"button\">\n                    {btnText}\n                </SignBtn>\n                {forget ? <ForgetSpan to={`${url}/recover`}>\n                    Forgot Password?\n                </ForgetSpan> : null}\n            </FormDiv>\n            <ModalNavigator to={`${url}/${change}`}>\n                {navigatorText}\n            </ModalNavigator>\n        </ModalWrapper>\n    )\n}\n\nconst RecoveryModal = ({url}) => {\n    return(\n    <ModalWrapper>\n        <LogoDiv>\n                <ClockLogo />\n        </LogoDiv>\n        <FormDiv>\n        <RecoverMessage>\n            Enter your email address and well send your instructions for resetting your \n            password.\n        </RecoverMessage>\n        <Form>\n        <Input type=\"email\" placeholder=\"Email Address\" \n        maxLength=\"30\" name=\"email\" id=\"email\" />\n        </Form>\n        <WarningSign></WarningSign>\n        <SignBtn type=\"button\">\n            Reset Password\n        </SignBtn>\n        </FormDiv>\n        <ModalNavigator to={`${url}/signin`}>\n                Back\n        </ModalNavigator>\n    </ModalWrapper>\n    )\n}\n\nconst SignInUpModal = ({showModal, toggleModal}) => {\n    const modalRef = useRef();\n\n    const animation = useSpring({\n       config: {\n           duration: 250\n       },\n       opacity: showModal ? 1 : 0,\n       transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n    });\n    \n    const closeModal = (e) => {\n        if(e.target === modalRef.current){\n            toggleModal();\n        }\n    }\n\n    const { path , url} = useRouteMatch();\n\n\n    return (\n        <>\n        {showModal ? \n        <Background ref={modalRef} onClick={closeModal}>\n            <animated.div style={animation}>\n                <Switch>\n                    <Route exact path={`${url}/signin`} component={() => <SignModal url={url} toggleModal={toggleModal} btnText=\"Sign In\" navigatorText=\"Sign Up\" forget change=\"signup\"/>} />\n                    <Route exact path={`${url}/signup`} component={() => <SignModal url={url} toggleModal={toggleModal} btnText=\"Sign Up\" navigatorText=\"Back\" forget={false} change=\"signin\"/>} />\n                    <Route path={`${url}/recover`} component={() => <RecoveryModal url={url} />} />\n                    <Redirect to={`${url}/signin`} />\n                </Switch>\n            </animated.div>\n        </Background>\n        : \n        null}\n        </>\n    )\n}\n\nexport default SignInUpModal;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/index.js",["114"],"import React from 'react'\nimport { NavSignInUp, Nav, NavbarContainer,\nNavbarMenu, NavItem, NavUserIcon, SignInUp } from './NavbarElements'\nimport { IoIosNotificationsOutline } from 'react-icons/io';\nimport { SiGooglemaps } from 'react-icons/si';\nimport { IoSettingsOutline } from 'react-icons/io5';\nimport {useRouteMatch} from 'react-router-dom';\n\nconst Navbar = ({toggleModal}) => {\n    const {path, url} = useRouteMatch();\n\n    return (\n        <>\n            <Nav>\n                <NavbarContainer>\n                    <NavSignInUp to={`${url}/signin`} onClick={toggleModal}>\n                        <NavUserIcon />\n                        <SignInUp >Sign In | Sign Up</SignInUp>\n                    </NavSignInUp>\n                    <NavbarMenu>\n                        <NavItem>\n                            <SiGooglemaps />\n                        </NavItem>\n                        <NavItem>\n                            <IoIosNotificationsOutline />\n                        </NavItem>\n                        <NavItem>\n                            <IoSettingsOutline />\n                        </NavItem>\n                    </NavbarMenu>\n                </NavbarContainer>\n            </Nav>\n        </>\n    )\n}\n\nexport default Navbar;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/NavigationItem.js",["115"],"import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport { useRouteMatch } from 'react-router-dom';\n\n// const ItemBox = styled.div`\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     padding: 30px 5px 30px 15px;\n//     border-bottom\n// ` \n\nconst ItemBox = styled(Link)`\n    display: flex;\n    flex-direction: row;\n    padding: 7px 5px;\n    justify-content: space-between;\n    width: 100%;\n    text-decoration: none;\n    margin-top: 10px;\n    &.active{\n        background-color: \n    }\n\n`\n\nconst IconDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`\nconst IconDesc = styled.span`\n    color: ${Colors.darkGray};\n    margin-left: 12px;\n    font-size: 1.21rem;\n    display: block;\n    text-wrap: nowrap;\n`\n\nconst InfoDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 40px;\n`\n\nconst InfoItem = styled.span`\n    color: ${Colors.mixGray};\n    text-wrap: nowrap;\n`\n\nconst NavigationItem = ({icon, itemName, hours, noItems, togglePopup,id}) => {\n    const { path,url} = useRouteMatch();\n    return (\n        <ItemBox to={`${url}/${itemName}`} \n         onContextMenu={togglePopup} id={id}>\n            <IconDiv>\n                {icon}\n                <IconDesc>\n                    {itemName}\n                </IconDesc>\n            </IconDiv>\n            <InfoDiv>\n                <InfoItem>\n                    {hours}h\n                </InfoItem>\n                <InfoItem>\n                    {noItems}\n                </InfoItem>\n            </InfoDiv>\n        </ItemBox>\n    )\n}\n\nexport default NavigationItem;\n",["116","117"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/ConfigureStore.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/projects/projectsSlice.js",["118"],"import { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n// const initialState = {\n//     status: 'idle',\n//     entities: {\n//         1: {id: 1, text: 'Databases', color: Colors.navyBlue, isCompleted: false},\n//         2: {id: 2, text: 'Theory Of Computation', color: Colors.lightdarkpurple, isCompleted: false}\n//     },\n//     error: false\n// };\n\nconst projectsAdapter = createEntityAdapter();\n\nconst initialState = projectsAdapter.getInitialState({\n    status: 'idle',\n    error: false\n});\n\nconst projectSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded : {\n            reducer(state ,action){\n                const project = action.payload;\n                projectsAdapter.addOne(state, project)\n            },\n            \n            prepare(id, text, color, isCompleted = false){\n                return {\n                    payload: {id, text, color, isCompleted}\n                };\n            }\n        },\n        projectDeleted(state ,action){\n            const id = action.payload;\n            projectsAdapter.removeOne(state, id);\n        },\n        changeColor : {\n            reducer(state, action){\n                const {projectId, color} = action.payload;\n                if(state.entities[projectId])\n                    state.entities[projectId].color = color;\n            },\n            prepare(projectId, color){\n                return {\n                    payload: {projectId, color}\n                };\n            }\n        },\n        changeName: {\n            reducer(state, action){\n                const {projectId, name} = action.payload;\n                state.entities[projectId].text = name;\n            },\n            prepare(projectId, name){\n                return{\n                    payload: {projectId, name}\n                };\n            }\n        },\n        projectCompleted(state, action){\n            if(state.entities[action.payload])\n                state.entities[action.payload].isCompleted = true;\n        }\n    }\n});\n\n\nexport const {projectAdded, projectDeleted, changeColor , projectCompleted, changeName} = projectSlice.actions;\n\nexport const {\n    selectAll: selectProjects,\n    selectById: selectProjectById,\n    selectTotal: selectTotalProjects,\n    selectIds: selectProjectIds\n} = projectsAdapter.getSelectors(state => state.projects);\n\nexport default projectSlice.reducer;\n\n\nexport const Colors = {\n    gray : '#dbdbdb',\n    navyBlue: '#203d69',\n    skyblue: '#37c8f0',\n    lightorange: '#f0a843',\n    darkpurple: '#4f0961',\n    purple: '#c22f58',\n    yellow: '#e6cc29',\n    forestgreen: '#77ad4b',\n    blush: '#c76d7b',\n    lightdarkpurple: '#765ca1',\n    lightmarine: '#89f5d8',\n    darkmarine: '#58d1b1',\n    strongpurple: '#6f319e',\n    lightnavyblue: '#3d6ddb',\n    pink: '#ed53d9',\n    sunsetorange: '#f06343',\n    gloomygray: '#9c9998',\n    lightbrown: '#a1847a',\n    darkaquamarine: '#2d8a70',\n    nuancedblack: '#414242'\n};","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/RClickProject.js",["119"],"import React from 'react'\nimport styled from 'styled-components';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport {useSpring, animated} from 'react-spring';\nimport {useDispatch , useSelector } from 'react-redux';\nimport {projectDeleted, projectCompleted} from '../../features/projects/projectsSlice.js';\nconst PopupContainer = styled(animated.div)`\n    padding: 2px;\n    display: flex;\n    flex-direction: column;\n    box-shadow: 0px 0px 15px rgba(0,0,0,0.3);\n    background-color: #fff;\n    position: absolute;\n    top: ${({yPos}) => yPos};\n    left: ${({xPos}) => xPos};\n    border-radius: 8px;\n`\n\nconst PopupButtons = styled.button`\n    background-color: #fff;\n    color: ${Colors.darkGray};\n    border: none;\n    font-size: 1rem;\n    padding: 8px 25px; \n    border-radius: 8px;\n    outline: none;\n    &:hover{\n        background-color: ${Colors.lightGray};\n    }\n`\n\nconst ProjectPopup = ({isPopupOpen, xPos, yPos,selectedContextProject, toggleEditProject}) => {\n\n    const animation = useSpring({\n        config: {\n            duration: 250,\n        },\n        transform: isPopupOpen ? 'scale(1)' : 'scale(0)'\n     });\n\n\n     const dispatch= useDispatch();\n     \n\n    return (\n        isPopupOpen ? \n            <PopupContainer style={animation} xPos={xPos} yPos={yPos}>\n                <PopupButtons onClick={toggleEditProject}>\n                    Edit Project\n                </PopupButtons>\n                <PopupButtons onClick={() => {\n                     if(!selectedContextProject) return;\n                     dispatch(projectCompleted(selectedContextProject));\n                }}>\n                    Complete\n                </PopupButtons>\n                <PopupButtons onClick={() => {\n                    if(!selectedContextProject) return;\n                    dispatch(projectDeleted(selectedContextProject));\n                }}>\n                    Delete Project\n                </PopupButtons>\n            </PopupContainer>\n        : null\n    )\n}\n\nexport default ProjectPopup;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/sessions/sessionSlice.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/AddProjectModal.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/App.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/todos/todoSlice.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/index.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/StatsBar.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/MainElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/InputComponent.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/TodosComponent.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/TimerComponent.js",["120"],"import React from 'react'\nimport { TimerContainer, Minimize, ButtonDiv, ButtonContainer,TimeContainer,\nSmallTimerContainer, SmallTimeContainer, SmallButtonContainer,\nSmallButtonDiv, SmallTextDiv, TodoItem} from './TimerElements.js';\nimport { useTimer } from 'react-timer-hook';\nimport {CircularProgressbarWithChildren} from 'react-circular-progressbar';\nimport './style.css';\nimport RadialSeparators from './RadialSeparators.js';\nimport { IoStopCircleOutline,IoCaretForwardCircleOutline,IoPauseCircleOutline } from 'react-icons/io5';\nimport {useSpring} from 'react-spring';\nimport {selectTodoById, todoToggled} from '../../features/todos/todoSlice.js';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { DateInfo, ItemText ,Play, TickDiv, Button,ButtonDiv as BDiv,\n    ButtonTextDiv,formatDate} from '../Main/TodosComponent.js';\nimport { AiOutlineCheck } from 'react-icons/ai';\n\nconst TimerComponent = ({expiryTimestamp, isMinimized, setMinimization,setRunningProject,currentRunningTodo}) => {\n    const {\n        seconds,\n        minutes,\n        isRunning,\n        start,\n        pause,\n        resume,\n        restart\n        } = useTimer({ expiryTimestamp, onExpire: () => console.warn('onExpire called') });\n\n      const findSeconds = function(min ,sec){\n          const minSecs = (50-min-1) * 60;\n          const secs = 60 -sec;\n          return secs + minSecs;\n      }\n\n      const animation = useSpring({\n          config: {\n              duration: 250,\n              friction: 400,\n              tension: 40\n          },\n          display: isMinimized ? 'block' : 'none',\n          transform: isMinimized ? 'scale(1)' : 'scale(10)'\n        });\n\n      const animation2 = useSpring({\n        config: {\n            duration: 100,\n            friction: 400,\n            tension: 40\n        },\n        display: isMinimized ? 'none' : 'block',\n        transform: isMinimized ? 'scale(0)' : 'scale(1)',\n        bottom: isMinimized ? '5%' : '0%',\n        left: isMinimized ? '20%' : '0'\n      })\n    \n    const currentTodo = useSelector(state => selectTodoById(state,currentRunningTodo));\n    const dispatch = useDispatch();\n\n    return (\n       !isMinimized ? <TimerContainer style={animation2}>\n           <Minimize onClick={() =>setMinimization(!isMinimized)}/>\n           <TodoItem >\n                <ButtonTextDiv>\n                    <BDiv>\n                        <Button onClick={() => {\n                            dispatch(todoToggled(currentTodo.id));\n                            setRunningProject(0);\n                        }}/>\n                        <TickDiv onClick={() => {\n                            dispatch(todoToggled(currentTodo.id))}} >\n                            <AiOutlineCheck />\n                        </TickDiv>\n                    </BDiv>\n                    <BDiv>\n                        <Button />\n                        <Play onClick={() => {\n                            setRunningProject(currentTodo.id);\n                            setMinimization(false);\n                        }}/>\n                    </BDiv>\n                    <ItemText>\n                        {currentTodo.text}\n                    </ItemText>\n                </ButtonTextDiv>\n                <DateInfo>\n                   {currentTodo.dueDate ?  formatDate(new Date(currentTodo.dueDate)) : null}\n                </DateInfo>\n            </TodoItem>\n           <CircularProgressbarWithChildren  value={(findSeconds(minutes,seconds)/(50.0*60))}\n                maxValue={1}\n                strokeWidth={5}\n                className=\"bigProgressBar\">\n                <RadialSeparators\n                count={12}\n                style={{\n                background: \"#fff\",\n                width: \"1px\",\n                height: `${5}%`\n                }} />\n                <TimeContainer>\n                    {Intl.NumberFormat(navigator.language,{\n                        style: 'decimal',\n                        minimumIntegerDigits: 2\n                    }).format(minutes)\n                    +\":\"\n                    +Intl.NumberFormat(navigator.language,{\n                        style: 'decimal',\n                        minimumIntegerDigits: 2\n                    }).format(seconds)}\n                </TimeContainer>\n            </CircularProgressbarWithChildren>\n                {isRunning ?\n                 <ButtonDiv>\n                    <ButtonContainer onClick={pause}>\n                        <IoPauseCircleOutline />\n                    </ButtonContainer>\n                </ButtonDiv> :\n                <ButtonDiv>\n                    <ButtonContainer onClick={resume}>\n                        <IoCaretForwardCircleOutline />\n                    </ButtonContainer>\n                    <ButtonContainer onClick={() => {\n                        const time = new Date();\n                        time.setSeconds(time.getSeconds() + 50*60);\n                        restart(time);\n                        pause();\n                        }}>\n                        <IoStopCircleOutline />\n                    </ButtonContainer>\n                    </ButtonDiv> \n                }\n        </TimerContainer> \n        : <SmallTimerContainer onDoubleClick={() => setMinimization(false)}\n        style={animation}>\n            <CircularProgressbarWithChildren\n                className=\"smallBar\"\n                value={(findSeconds(minutes,seconds)/(50.0*60))}\n                maxValue={1}\n                strokeWidth={7}>\n                <SmallTimeContainer>\n                    {Intl.NumberFormat(navigator.language,{\n                        style: 'decimal',\n                        minimumIntegerDigits: 2\n                    }).format(minutes)}\n                </SmallTimeContainer>\n            </CircularProgressbarWithChildren>\n            <SmallTextDiv>\n                {currentTodo?.text}\n            </SmallTextDiv>\n            {isRunning ?\n                    <SmallButtonContainer onClick={pause}>\n                        <IoPauseCircleOutline />\n                    </SmallButtonContainer>\n                     :\n                <SmallButtonDiv>\n                    <SmallButtonContainer onClick={resume}>\n                        <IoCaretForwardCircleOutline />\n                    </SmallButtonContainer>\n                    <SmallButtonContainer onClick={() => {\n                        const time = new Date();\n                        time.setSeconds(time.getSeconds() + 50*60);\n                        restart(time);\n                        pause();\n                        }}>\n                        <IoStopCircleOutline />\n                    </SmallButtonContainer>\n                </SmallButtonDiv> \n                }\n        </SmallTimerContainer>\n    )\n}\n\nexport default TimerComponent;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/TimerElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Timer/RadialSeparators.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":7,"column":10,"nodeType":"127","messageId":"128","endLine":7,"endColumn":16},{"ruleId":"121","replacedBy":"129"},{"ruleId":"123","replacedBy":"130"},{"ruleId":"125","severity":1,"message":"131","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":14},{"ruleId":"121","replacedBy":"132"},{"ruleId":"123","replacedBy":"133"},{"ruleId":"125","severity":1,"message":"134","line":209,"column":13,"nodeType":"127","messageId":"128","endLine":209,"endColumn":17},{"ruleId":"125","severity":1,"message":"134","line":10,"column":12,"nodeType":"127","messageId":"128","endLine":10,"endColumn":16},{"ruleId":"125","severity":1,"message":"134","line":56,"column":13,"nodeType":"127","messageId":"128","endLine":56,"endColumn":17},{"ruleId":"121","replacedBy":"135"},{"ruleId":"123","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"137","line":1,"column":23,"nodeType":"127","messageId":"128","endLine":1,"endColumn":37},{"ruleId":"125","severity":1,"message":"138","line":5,"column":23,"nodeType":"127","messageId":"128","endLine":5,"endColumn":34},{"ruleId":"125","severity":1,"message":"139","line":22,"column":9,"nodeType":"127","messageId":"128","endLine":22,"endColumn":14},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'Colors' is defined but never used.","Identifier","unusedVar",["140"],["141"],"'Link' is defined but never used.",["140"],["141"],"'path' is assigned a value but never used.",["140"],["141"],"'createSelector' is defined but never used.","'useSelector' is defined but never used.","'start' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]