[{"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/index.js":"1","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/pages/Home.js":"2","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/NavbarElements.js":"3","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/index.js":"4","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/SidebarElements.js":"5","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/SignModal.js":"6","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/index.js":"7","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/NavigationItem.js":"8","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/ConfigureStore.js":"9","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/projects/projectsSlice.js":"10","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/RClickProject.js":"11","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/sessions/sessionSlice.js":"12","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/AddProjectModal.js":"13","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/App.js":"14","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/todos/todoSlice.js":"15","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/index.js":"16","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/StatsBar.js":"17","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/MainElements.js":"18","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/InputComponent.js":"19"},{"size":3739,"mtime":1611591364602,"results":"20","hashOfConfig":"21"},{"size":3558,"mtime":1612729031431,"results":"22","hashOfConfig":"21"},{"size":1556,"mtime":1612722271578,"results":"23","hashOfConfig":"21"},{"size":3171,"mtime":1612728995574,"results":"24","hashOfConfig":"21"},{"size":1752,"mtime":1612554673768,"results":"25","hashOfConfig":"21"},{"size":5692,"mtime":1611754191558,"results":"26","hashOfConfig":"21"},{"size":1149,"mtime":1611521780033,"results":"27","hashOfConfig":"21"},{"size":1767,"mtime":1612728427171,"results":"28","hashOfConfig":"21"},{"size":413,"mtime":1611353899810,"results":"29","hashOfConfig":"21"},{"size":2969,"mtime":1611836812701,"results":"30","hashOfConfig":"21"},{"size":2013,"mtime":1611836722114,"results":"31","hashOfConfig":"21"},{"size":821,"mtime":1611431852953,"results":"32","hashOfConfig":"21"},{"size":5753,"mtime":1612720793053,"results":"33","hashOfConfig":"21"},{"size":1156,"mtime":1612798183805,"results":"34","hashOfConfig":"21"},{"size":2937,"mtime":1612799779913,"results":"35","hashOfConfig":"21"},{"size":928,"mtime":1612729121301,"results":"36","hashOfConfig":"21"},{"size":1485,"mtime":1612531704355,"results":"37","hashOfConfig":"21"},{"size":297,"mtime":1612543594983,"results":"38","hashOfConfig":"21"},{"size":9712,"mtime":1612800603651,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1o856sf",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/index.js",[],["89","90"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/pages/Home.js",["91"],"import React, {useState} from 'react'\nimport Navbar from '../components/Navbar';\nimport SignModal from '../components/Modals/SignModal.js';\nimport ProjectPopup from '../components/Modals/RClickProject.js';\nimport styled from 'styled-components';\nimport { Sidebar } from '../components/Sidebar/index.js';\nimport { Colors } from '../components/Navbar/NavbarElements.js';\nimport ProjectModal from '../components/Modals/AddProjectModal.js';\nimport Body from '../components/Main/index.js'; \n\nconst HomeContainer = styled.div`\n    position: relative;\n`\nconst BodyContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    height: 95vh;\n`\n\n\n\nconst Home = () => {\n    // Sign In/Sign Up modal state\n    const [showSignModal, setSignInUpModal] = useState(false);\n    const toggleModal = () => {\n        setSignInUpModal(prev => !prev);\n    }\n\n    // The add project popup state\n    const [ showAddProject, setShowAddProject] = useState(false);\n    const toggleAddProject = function() {\n        setShowAddProject(prev => !prev);\n    } \n\n    // The edit project popup state(is it open or not)\n    const [ showEditProject, setShowEditProject] = useState(false);\n    const toggleEditProject = function(e) {\n        setShowEditProject(prev => !prev);\n    } \n\n    // Selected project when right clicking on one of the projects on the sidebar\n    const [selectedContextProject, setSelectedProject] = useState(0); \n    const toggleSelectedProject = function(value) {\n        setSelectedProject(() => value);\n    }\n\n    // State for determining the position of the popup when right clicking\n    const [xPos, setX] = useState(\"50%\");\n    const [yPos, setY] = useState(\"50%\");\n    const [defaultProject, setDefaultProject] = useState(0);\n    const {isOpen: isProjectPopupOpen, toggleModal : changeProjectPopup} = usePopup((e) => {\n        setX(() => e.clientX +\"px\");\n        setY(() => e.clientY +\"px\");\n        const id = e.currentTarget.id;\n        setDefaultProject(() => id);\n        toggleSelectedProject(id);\n    });\n    \n    const [chosenMenu, setChosenMenu] = useState('Today');\n\n    return (\n        <HomeContainer onClick={changeProjectPopup}>\n            <Navbar toggleModal={toggleModal} />\n            <BodyContainer>\n                <Sidebar  togglePopup={changeProjectPopup} toggleProjectModal={toggleAddProject} \n                chosenMenu={chosenMenu} setChosenMenu={setChosenMenu}/>\n                <Body chosenMenu={chosenMenu}/>\n            </BodyContainer>\n            <SignModal showModal={showSignModal} toggleModal={toggleModal}/>\n            <ProjectPopup isPopupOpen={isProjectPopupOpen} xPos={xPos} yPos={yPos} \n            selectedContextProject={selectedContextProject} \n            toggleEditProject={toggleEditProject} />\n            <ProjectModal isProjectModalOpen={showAddProject} toggleProjectModal={toggleAddProject} \n            toAdd={true} defaultProject={false}/>\n            <ProjectModal isProjectModalOpen={showEditProject} \n            toggleProjectModal={toggleEditProject} toAdd={false}\n             defaultProject={defaultProject} setDefaultProject={setDefaultProject}/>\n        </HomeContainer>\n    )\n}\n\nconst usePopup = function(additionalLogic) {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggleModal = function(e) {\n        if(e.type === 'click'){\n            setIsOpen(() => false);\n        }\n        else{\n            e.preventDefault();\n            setIsOpen(prev => !prev);\n            additionalLogic(e);\n        }\n    }\n\n    return {isOpen, toggleModal};\n}\n\nexport default Home;\n",["92","93"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/NavbarElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/index.js",["94"],"import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport { BiSun } from 'react-icons/bi';\nimport { WiSunset } from 'react-icons/wi';\nimport { RiCalendarCheckLine } from 'react-icons/ri';\nimport { AiOutlinePlus } from 'react-icons/ai';\nimport { SidebarContainer, ChronoNav, ItemIcon, ProjectsNav, Circle,\nProjectButton, ButtonDesc} from './SidebarElements';\nimport NavigationItem from './NavigationItem';\nimport { useSelector } from 'react-redux';\nimport { selectProjects } from '../../features/projects/projectsSlice.js';\n\nconst Projects = ({projects, togglePopup, toggleProjectModal, chosenMenu, setChosenMenu}) => {\n\n            return(projects.length !== 0 ?<ProjectsNav>\n                {\n                    projects.map(project => \n                        !project.isCompleted ? <NavigationItem \n                            setChosenMenu={setChosenMenu}\n                            chosenMenu={chosenMenu}\n                            togglePopup={togglePopup}\n                            icon={\n                            <Circle color={project.color} />\n                           }      \n                            key={project.id} \n                            id={project.id}\n                            itemName={project.text}    \n                            hours={0}\n                            noItems={0}\n                        /> : null\n                    )\n                }\n                <ProjectButton onClick={toggleProjectModal}>\n                    <AiOutlinePlus />\n                    <ButtonDesc>\n                        Add Project\n                    </ButtonDesc>\n                </ProjectButton>\n\n            </ProjectsNav> : null)\n}\n\nexport const Sidebar = ({togglePopup, toggleProjectModal, chosenMenu, setChosenMenu}) => {\n    const projects = useSelector(selectProjects);\n    // Hours and number of todos have to be calculated dynamically\n    // Add it later after making sure everything is in place\n    return (\n        <SidebarContainer>\n            <ChronoNav>\n                <NavigationItem icon={\n                    <ItemIcon color=\"#44a336\">\n                        {<BiSun />}\n                    </ItemIcon>\n                } itemName=\"Today\" hours={2} noItems={1} chosenMenu={chosenMenu} setChosenMenu={setChosenMenu}/>\n                 <NavigationItem icon={\n                    <ItemIcon color=\"#e0881b\">\n                        {<WiSunset />}\n                    </ItemIcon>\n                } itemName=\"Tomorrow\" hours={0} noItems={0} chosenMenu={chosenMenu} setChosenMenu={setChosenMenu}/>\n                 <NavigationItem icon={\n                    <ItemIcon color={Colors.themeBlue}>\n                        {<RiCalendarCheckLine />}\n                    </ItemIcon>\n                } itemName=\"Upcoming\" hours={0} noItems={0} chosenMenu={chosenMenu} setChosenMenu={setChosenMenu}/>\n            </ChronoNav>\n            <Projects projects={projects} togglePopup={togglePopup} \n            toggleProjectModal={toggleProjectModal} chosenMenu={chosenMenu} setChosenMenu={setChosenMenu}/>\n        </SidebarContainer>\n    )\n}\n\nexport default Sidebar;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/SidebarElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/SignModal.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Navbar/index.js",[],["95","96"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Sidebar/NavigationItem.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/ConfigureStore.js",[],["97","98"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/projects/projectsSlice.js",["99"],"import { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n// const initialState = {\n//     status: 'idle',\n//     entities: {\n//         1: {id: 1, text: 'Databases', color: Colors.navyBlue, isCompleted: false},\n//         2: {id: 2, text: 'Theory Of Computation', color: Colors.lightdarkpurple, isCompleted: false}\n//     },\n//     error: false\n// };\n\nconst projectsAdapter = createEntityAdapter();\n\nconst initialState = projectsAdapter.getInitialState({\n    status: 'idle',\n    error: false\n});\n\nconst projectSlice = createSlice({\n    name: 'projects',\n    initialState,\n    reducers: {\n        projectAdded : {\n            reducer(state ,action){\n                const project = action.payload;\n                projectsAdapter.addOne(state, project)\n            },\n            \n            prepare(id, text, color, isCompleted = false){\n                return {\n                    payload: {id, text, color, isCompleted}\n                };\n            }\n        },\n        projectDeleted(state ,action){\n            const id = action.payload;\n            projectsAdapter.removeOne(state, id);\n        },\n        changeColor : {\n            reducer(state, action){\n                const {projectId, color} = action.payload;\n                if(state.entities[projectId])\n                    state.entities[projectId].color = color;\n            },\n            prepare(projectId, color){\n                return {\n                    payload: {projectId, color}\n                };\n            }\n        },\n        changeName: {\n            reducer(state, action){\n                const {projectId, name} = action.payload;\n                state.entities[projectId].text = name;\n            },\n            prepare(projectId, name){\n                return{\n                    payload: {projectId, name}\n                };\n            }\n        },\n        projectCompleted(state, action){\n            if(state.entities[action.payload])\n                state.entities[action.payload].isCompleted = true;\n        }\n    }\n});\n\n\nexport const {projectAdded, projectDeleted, changeColor , projectCompleted, changeName} = projectSlice.actions;\n\nexport const {\n    selectAll: selectProjects,\n    selectById: selectProjectById,\n    selectTotal: selectTotalProjects,\n    selectIds: selectProjectIds\n} = projectsAdapter.getSelectors(state => state.projects);\n\nexport default projectSlice.reducer;\n\n\nexport const Colors = {\n    gray : '#dbdbdb',\n    navyBlue: '#203d69',\n    skyblue: '#37c8f0',\n    lightorange: '#f0a843',\n    darkpurple: '#4f0961',\n    purple: '#c22f58',\n    yellow: '#e6cc29',\n    forestgreen: '#77ad4b',\n    blush: '#c76d7b',\n    lightdarkpurple: '#765ca1',\n    lightmarine: '#89f5d8',\n    darkmarine: '#58d1b1',\n    strongpurple: '#6f319e',\n    lightnavyblue: '#3d6ddb',\n    pink: '#ed53d9',\n    sunsetorange: '#f06343',\n    gloomygray: '#9c9998',\n    lightbrown: '#a1847a',\n    darkaquamarine: '#2d8a70',\n    nuancedblack: '#414242'\n};","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/RClickProject.js",["100"],"import React from 'react'\nimport styled from 'styled-components';\nimport { Colors } from '../Navbar/NavbarElements.js';\nimport {useSpring, animated} from 'react-spring';\nimport {useDispatch , useSelector } from 'react-redux';\nimport {projectDeleted, projectCompleted} from '../../features/projects/projectsSlice.js';\nconst PopupContainer = styled(animated.div)`\n    padding: 2px;\n    display: flex;\n    flex-direction: column;\n    box-shadow: 0px 0px 15px rgba(0,0,0,0.3);\n    background-color: #fff;\n    position: absolute;\n    top: ${({yPos}) => yPos};\n    left: ${({xPos}) => xPos};\n    border-radius: 8px;\n`\n\nconst PopupButtons = styled.button`\n    background-color: #fff;\n    color: ${Colors.darkGray};\n    border: none;\n    font-size: 1rem;\n    padding: 8px 25px; \n    border-radius: 8px;\n    outline: none;\n    &:hover{\n        background-color: ${Colors.lightGray};\n    }\n`\n\nconst ProjectPopup = ({isPopupOpen, xPos, yPos,selectedContextProject, toggleEditProject}) => {\n\n    const animation = useSpring({\n        config: {\n            duration: 250,\n        },\n        transform: isPopupOpen ? 'scale(1)' : 'scale(0)'\n     });\n\n\n     const dispatch= useDispatch();\n     \n\n    return (\n        isPopupOpen ? \n            <PopupContainer style={animation} xPos={xPos} yPos={yPos}>\n                <PopupButtons onClick={toggleEditProject}>\n                    Edit Project\n                </PopupButtons>\n                <PopupButtons onClick={() => {\n                     if(!selectedContextProject) return;\n                     dispatch(projectCompleted(selectedContextProject));\n                }}>\n                    Complete\n                </PopupButtons>\n                <PopupButtons onClick={() => {\n                    if(!selectedContextProject) return;\n                    dispatch(projectDeleted(selectedContextProject));\n                }}>\n                    Delete Project\n                </PopupButtons>\n            </PopupContainer>\n        : null\n    )\n}\n\nexport default ProjectPopup;\n",["101","102"],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/sessions/sessionSlice.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Modals/AddProjectModal.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/App.js",["103","104"],"\nimport Reac, { useEffect} from 'react';\nimport Home from './pages/Home.js';\nimport { Route,Switch, Redirect} from 'react-router-dom'\nimport { useSelector,  useDispatch } from 'react-redux';\nimport {projectAdded,Colors as ColorPalette} from './features/projects/projectsSlice.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(projectAdded(\n        1,\n        'Databases',\n        ColorPalette.navyBlue,\n        false\n        ));\n        dispatch(projectAdded(\n            2,\n            'Operating Systems',\n            ColorPalette.lightorange,\n            false\n            ));\n        dispatch(projectAdded(\n            3,\n            'Theory Of Computation',\n            ColorPalette.skyblue,\n            false\n            ));\n\n        dispatch(projectAdded(\n            4,\n            'Physics',\n            ColorPalette.forestgreen,\n            false\n            ));\n    })\n  return (\n    <>\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/features/todos/todoSlice.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/index.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/StatsBar.js",["105"],"import React from 'react'\nimport styled from 'styled-components';\nimport { Colors } from '../Navbar/NavbarElements.js';\n\nconst Bar = styled.div`\n    width: 100%;\n    font-color: ${Colors.mixGray};\n    display: flex;\n    padding: 4px 13%;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid ${Colors.lighterGray};\n    background-color: #fff;\n    border-radius: 5px;\n`\n\nconst ItemBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`\n\nconst Estimator = styled.span`\n    color: #227de6;\n    font-size: 1.8rem;\n    text-align: center;\n    margin-bottom: 4px;\n`\n\nconst ItemDesc = styled.span`\n    font-size: 1rem;\n    color: ${Colors.mixGray};\n`\n\nconst StatsBar = ({}) => {\n    // Receives the todos of the currently chosen menu and makes calculations\n    return (\n        <Bar>\n            <ItemBox>\n                <Estimator>0</Estimator>\n                <ItemDesc>Estimated Time(h)</ItemDesc>\n            </ItemBox>\n            <ItemBox>\n                <Estimator>6</Estimator>\n                <ItemDesc>Tasks To Be Completed</ItemDesc>\n            </ItemBox>\n            <ItemBox>\n                <Estimator>0</Estimator>\n                <ItemDesc>Elapsed Time(h)</ItemDesc>\n            </ItemBox>\n            <ItemBox>\n                <Estimator>0</Estimator>\n                <ItemDesc>Completed Tasks</ItemDesc>\n            </ItemBox>\n        </Bar>\n    )\n}\n\nexport default StatsBar;\n","/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/MainElements.js",[],"/mnt/c/Users/CRS/Desktop/ReactDevelopment/ToDoApp/to-do-app/src/components/Main/InputComponent.js",["106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":7,"column":10,"nodeType":"113","messageId":"114","endLine":7,"endColumn":16},{"ruleId":"107","replacedBy":"115"},{"ruleId":"109","replacedBy":"116"},{"ruleId":"111","severity":1,"message":"117","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":14},{"ruleId":"107","replacedBy":"118"},{"ruleId":"109","replacedBy":"119"},{"ruleId":"107","replacedBy":"120"},{"ruleId":"109","replacedBy":"121"},{"ruleId":"111","severity":1,"message":"122","line":1,"column":23,"nodeType":"113","messageId":"114","endLine":1,"endColumn":37},{"ruleId":"111","severity":1,"message":"123","line":5,"column":23,"nodeType":"113","messageId":"114","endLine":5,"endColumn":34},{"ruleId":"107","replacedBy":"124"},{"ruleId":"109","replacedBy":"125"},{"ruleId":"111","severity":1,"message":"126","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"123","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":36,"column":19,"nodeType":"129","messageId":"130","endLine":36,"endColumn":21},{"ruleId":"111","severity":1,"message":"131","line":14,"column":22,"nodeType":"113","messageId":"114","endLine":14,"endColumn":33},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'Colors' is defined but never used.","Identifier","unusedVar",["132"],["133"],"'Link' is defined but never used.",["132"],["133"],["132"],["133"],"'createSelector' is defined but never used.","'useSelector' is defined but never used.",["132"],["133"],"'Reac' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'selectTodos' is defined but never used.","no-global-assign","no-unsafe-negation"]